/**
 *            ===== 정리하기 =====
 *
 *      - 자바스크립트 원시형과 객체 리터럴은 사용하기 쉽지만 코드 중복이 일어나기 쉬움
 *
 *      1. 모듈 패턴은 이에관한 확실한 개선책!!
 *      --> 원시형/ 객체 리터럴에서는 불가능한,
 *          데이터 캡슐화와 애스팩트 지향 프로그라밍을 동원하여
 *          확장 및 단위 테스트를 매끄럽게 함
 *
 *      - 자바스크립트 커뮤니티에서는
 *        new 패턴을 사용하지 말자는 사람도 있지만,
 *
 *        생성자 함수로 초기화 코드를 공유할 수 있고,
 *        new 를 강제하게 하면 어렵지 않게 구현 가능하기 때문!
 *
 *      2. 모든 자바스크립트 함수는 prototype 프로퍼티를 통해 객체 인스턴스 간에
 *        코드와 데이터를 효과적으로 공유할 수 있음
 *        ( JS 만의 독특한 매카니즘 )
 *
 *      --> 다른 언어의 고전적 상속은 JS 에서 프로토타입 상속으로 구현 가능
 *          ( 또한 JS 는 프로토타입 상속으로 코드반복은 없애고,
 *            데이터를 감출 수 있는 함수형 상속 지원 )
 *
 *      3. 멍키패칭을 잘활용하면 한 객체의 기능을 다른 객체로 기증할 수 있음.
 *         ( 같은 참조를 바라보는 객체, 그러나 그객체가 실행되는 컨텍스트가 다른... )
 */
title( '정리하기' );
{
    debugger;
}