/**
 *           ===== 애스팩트 지향 프로그라밍( AOP ) =====
 *
 *      - 애스팩트 지향 프로그라밍은 변수에 객체 리터럴을 할당하지 않으면
 *        시작부터 문제.
 *        예 ) Aop 객체
 *
 *      --> 애스팩트를 적용하려면 포인트컷( 변수명등 )이 필요한데
 *          객체 리터럴은 이름 자체가 없기 때문
 *          예 ) Aop.변수명
 *
 *      --> 하지만 객체 리터럴을 팩토리 함수로 생성하면,
 *          반환된 리털을 가지고 놀 after 애스펙트에 함수를 래핑할 수 있다
 *          예 ) 아, 그니깐 after 에서 around 에 파라미터를 넘겨줘서
 *              래핑할 수 있으니깐... 그러면 반환될 값이 바뀌니껜...
 *
 *      - 단순 객체 리터럴에서는 의존성 주입은 시도조차 할 수 없지만, 리터럴을
 *        생성 / 반환 하는 함수는 의존성을 주입하는 과정에 아주 잘 어울림
 *
 *      - 검증 :
 *              단순 객체 리터럴은 검증 불가,
 *              생성자는 전달받은 인자를 어떤식으로든 검증하여 올바른 결과를 보장
 *
 *  ========================================================================
 *          결론 : 객체 리터럴은 싱글톤 또는,
 *                확실히 테스트를 마친 코드에서 생성된 객체 리터럴이 아닌한,
 *                실제 프로젝트에서는 사용하지 않는편이 좋음
 *  ========================================================================
 *
 *   - 예외적으로 객체 리터럴 사용 :
 *       함수 인자가 너무 많아 그 순서를 정확히 맞추기 쉽지 않을 경우 사용
 *   --> 이때 지켜야할 룰 : 프로퍼티가 하나도 없다는 건 기본값을 사용하라는 신호
 *
 *   --> 이때 지켜야할 룰 : 함수가 어떤 프로퍼티 조합도 대비할 수 있으려면 그만큼,
 *                      테스트를 많이해야하는 부담이 생김
 *
 *   ----> 팁 ) isValid 같은 검증 메서드를 하나맨들어두어서 검증하는 방식을 사용하는 것을 추천
 *
 *
 *
 *            ===== 객체 리터럴의 SOLID/DRY 표 =====
 *
 *     ----------------------------------------------------------------
 *
 *     - 원칙                   - 결과
 *
 *     - 단일책임                - 객체 리터럴은 아주 작은 편, 따라서
 *                               단일 책임 항목에서 문제가 될 만한 부분은 없음,
 *                               모듈 API 를 구성하는 덩치 큰 객체 리터럴은
 *                               자신의 모듈이 담당한 모든 책임을 짐
 *
 *     - 개방/폐쇄               - 객체 리터럴 특성상 제멋대로 확장될지 모름
 *
 *     - 리스코프 치환            - 해당사항 없음
 *
 *     - 인터페이스 분리           - 모듈 패턴 및 멍키 패칭 참고
 *
 *     - 의존성 역전              - 단순 객체 리터럴은 내부에 의존성을 주입할 생성자가
 *                               없으니 의존성 역전은 불가능함
 *
 *     - DRY( 반복하지 마라 )     - 싱글톤이 아닌 단순 객체 리터럴은 WET 한 코드가 되기 일쑤,
 *                               반드시 유념!!
 *
 *     ----------------------------------------------------------------
 *
 */
title( '객체 리터럴의 두가지 방법' );
{
    debugger;
}