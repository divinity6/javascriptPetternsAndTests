/**
 *           ===== 객체 리터럴 =====
 *
 *      - 객체 리터럴에는 두가지 방법이 있다
 *
 */
title( '객체 리터럴의 두가지 방법' );
{
    var kokoOne = { name : 'Koko' , genus : 'gorilla' , genius : 'sign language' };

    var amazeTheWorld = function(){
        return { name : 'Koko' , genus : 'gorilla' , genius : 'sign language' };
    };

    var kokoTwo = amazeTheWorld();
    debugger;

    // kokoOne 과 kokoTwo 는 같은 객체 리터럴 방식
}
/**
 *  - 두 방법중 하나가 더 DRY 함.
 *    과연 무엇이 더 DRY 할까?
 *    ( 매우 중요한 내용 )
 *
 *  - 같은 프로퍼티를 지닌 객체 리터럴을 여럿 생성할때 반복되는 프로퍼티 명을 입력하다 보면
 *    실수하기 마련.
 *
 *  - TDD 방식을 사용하면 어떤 함수가 원하는 프로퍼티를 지닌 객체를 반환하는지 충분히 확인 가능
 *    하기 때문에 실수를 방지할 수 있다
 *    ( 단순 객체 리터럴 만으로는 테스트할 방법이 없음 )
 *
 *  - 또한, 객체 리터럴의 프로퍼티에는 함수도 작성할 수 있다.
 *
 *  ----> 따라서, 후자 처럼 함수에서 반환하는 식으로 리터럴을 생성하지 않으면
 *        그 안의 함수를 테스트할 도리가 없다
 *
 *  ========================================================================
 *              즉, 일반적으로 쌩으로 객체리터럴을 생성해서 반환하는 것보다,
 *              함수로 한번 감싸서 반환하는게 좋은 코딩습관이라는 뜻
 *  ========================================================================
 *
 */