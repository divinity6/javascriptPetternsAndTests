/**
 *           ===== 멍키 패칭 SOLID/DRY 요약표 =====
 *
 *     ----------------------------------------------------------------
 *
 *     - 원칙                   - 결과
 *
 *     - 단일책임                - 기증받은 기능 다발이 단일 책임으로 이루어진다 해도 빌림
 *                               자체로 빌리는 객체에 책임을 전가하는 게 아닌가
 *                               하는 점에서 논란의 여지는 있을 수 있다.
 *
 *                               하지만, 그런 식으로 생각하면 애스팩트 역시 책임을
 *                               더하는 건 마찬가지라서 결국 어불성설이다
 *
 *
 *     - 개방/폐쇄               - 멍키 패칭을 분별 있게 잘 쓰면 개방/폐쇄 원칙을
 *                               어길 일은 없다
 *
 *     - 리스코프 치환            - 빌린 함수가 새 객체와 옛 객체에서 그 의미가 같다면
 *                               문제 없다
 *
 *     - 인터페이스 분리           - 인터페이스 분리 원칙은 멍키 패칭이 추구하는 바로 그자체다!
 *
 *     - 의존성 역전              - 의존성은 보통 빌려주는 객체 또는 빌리는 객체
 *                               어느쪽에서도 주입될 수 있다
 *
 *     - DRY( 반복하지 마라 )     - 창의적이고 책임감 있는 개발자의 손을 거친다면
 *                               멍키 패칭은 DRY 한 코드를 유지하는데
 *                               도움이 많이 될 것이다
 *
 *     ----------------------------------------------------------------
 *
 */
title( '' );
{
    debugger;
}